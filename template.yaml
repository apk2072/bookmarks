AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Bookmarks - A sample Serverless App using AWS SAM
Resources:
  api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - Bookmarking App
        - ResourceName: /bookmarks
      StageName: !Ref APIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /bookmarks:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${listBookmarks.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createBookmark.Arn}/invocations
              responses: {}
          /bookmarks/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getBookmark.Arn}/invocations
              responses: {}
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${updateBookmark.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteBookmark.Arn}/invocations
              responses: {}
          /secret/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getSecret.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
    Metadata:
      bkTag: /bookmarks
  getBookmark:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getBookmark
      Description: !Sub
        - ${ResourceName} Function 
        - ResourceName: getBookmark
      CodeUri: src/getBookmark
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref bookmarksTable
      Environment:
        Variables:
          TABLE_NAME: !Ref bookmarksTable
          TABLE_ARN: !GetAtt bookmarksTable.Arn
      Events:
        apiGET:
          Type: Api
          Properties:
            Path: /bookmarks/{id}
            Method: GET
            RestApiId: !Ref api
    Metadata:
      bkTag: getBookmark
  updateBookmark:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-updateBookmark
      Description: !Sub
        - ${ResourceName} Function
        - ResourceName: updateBookmark
      CodeUri: src/updateBookmark
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref bookmarksTable
      Environment:
        Variables:
          TABLE_NAME: !Ref bookmarksTable
          TABLE_ARN: !GetAtt bookmarksTable.Arn
      Events:
        apiPUT:
          Type: Api
          Properties:
            Path: /bookmarks/{id}
            Method: PUT
            RestApiId: !Ref api
    Metadata:
      bkTag: updateBookmark
  createBookmark:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-createBookmark
      Description: !Sub
        - ${ResourceName} Function
        - ResourceName: createBookmark
      CodeUri: src/createBookmark
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref bookmarksTable
      Environment:
        Variables:
          TABLE_NAME: !Ref bookmarksTable
          TABLE_ARN: !GetAtt bookmarksTable.Arn
      Events:
        apiPOST:
          Type: Api
          Properties:
            Path: /bookmarks
            Method: POST
            RestApiId: !Ref api
    Metadata:
      bkTag: createBookmark
  deleteBookmark:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-deleteBookmark
      Description: !Sub
        - ${ResourceName} Function
        - ResourceName: deleteBookmark
      CodeUri: src/deleteBookmark
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref bookmarksTable
      Environment:
        Variables:
          TABLE_NAME: !Ref bookmarksTable
          TABLE_ARN: !GetAtt bookmarksTable.Arn
      Events:
        apiDELETE:
          Type: Api
          Properties:
            Path: /bookmarks/{id}
            Method: DELETE
            RestApiId: !Ref api
    Metadata:
      bkTag: deleteBookmark
  listBookmarks:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-listBookmarks
      Description: !Sub
        - ${ResourceName} Function
        - ResourceName: listBookmarks
      CodeUri: src/listBookmarks
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref bookmarksTable
      Environment:
        Variables:
          TABLE_NAME: !Ref bookmarksTable
          TABLE_ARN: !GetAtt bookmarksTable.Arn
      Events:
        apiGETAll:
          Type: Api
          Properties:
            Path: /bookmarks
            Method: GET
            RestApiId: !Ref api
    Metadata:
      bkTag: listBookmarks
  bookmarksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-bookmarks
    Metadata:
      bkTag: Bookmarks
  
  getSecret:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getSecret
      Description: !Sub
        - ${ResourceName} Function 
        - ResourceName: getSecret
      CodeUri: src/secrets
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 1024
      Timeout: 15
      Tracing: Active
      Policies:
      - Statement:
        - Sid: KmsAndSmsReadOnlyPolicy
          Effect: Allow
          Action:
          - kms:Decrypt
          - kms:GenerateDataKey*
          - kms:DescribeKey
          - ssm:GetParameterHistory
          - ssm:GetParametersByPath
          - ssm:GetParameters
          - ssm:GetParameter
          - secretsmanager:Describe*
          - secretsmanager:Get*
          - secretsmanager:List*
          Resource: '*'
      Environment:
        Variables:
          KMS_SECRET: 'update with your KMS secret id'
          SSM_SECRET: '/db/secret'
          SM_USER_ID: 'dbUserId'
          SM_PASSWORD: 'password'
      Events:
        apiGET:
          Type: Api
          Properties:
            Path: /secret/{id}
            Method: GET
            RestApiId: !Ref api
    Metadata:
      bkTag: getSecret
Parameters:
  StackName:
    Type: String
    Description: Stack Name
  APIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names